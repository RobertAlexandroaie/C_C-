//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.ProxySubscribe {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxySubscribe.ISubscribe", CallbackContract=typeof(WCFClient.ProxySubscribe.ISubscribeCallback))]
    public interface ISubscribe {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscribe/AddMessage", ReplyAction="http://tempuri.org/ISubscribe/AddMessageResponse")]
        void AddMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscribe/AddMessage", ReplyAction="http://tempuri.org/ISubscribe/AddMessageResponse")]
        System.Threading.Tasks.Task AddMessageAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscribe/Subscribe", ReplyAction="http://tempuri.org/ISubscribe/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscribe/Subscribe", ReplyAction="http://tempuri.org/ISubscribe/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscribe/Unsubscribe", ReplyAction="http://tempuri.org/ISubscribe/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscribe/Unsubscribe", ReplyAction="http://tempuri.org/ISubscribe/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscribeCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscribe/OnInsertUpdateDelete")]
        void OnInsertUpdateDelete(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscribeChannel : WCFClient.ProxySubscribe.ISubscribe, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscribeClient : System.ServiceModel.DuplexClientBase<WCFClient.ProxySubscribe.ISubscribe>, WCFClient.ProxySubscribe.ISubscribe {
        
        public SubscribeClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SubscribeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SubscribeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscribeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscribeClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddMessage(string message) {
            base.Channel.AddMessage(message);
        }
        
        public System.Threading.Tasks.Task AddMessageAsync(string message) {
            return base.Channel.AddMessageAsync(message);
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
